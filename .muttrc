# muttrc
# $Id: muttrc,v 1.5 2006/01/21 15:41:27 holsta Exp $
#

# Source local stuff.

set folder=~/.Maildir

#set mail_check=20
#set timeout=10

# passwords and mailboxes sourced from private file
source ~/.mutt.personal

# Configuration variables

set abort_nosubject=ask-yes # Yell if I try to send mail with no subject.
set abort_unmodified=yes        # Unmodified messages should be thrown away
set alias_file=~/.mutt.aliases
set allow_8bit=yes      # 
set arrow_cursor=no
set ascii_chars=no      # use ACS for threads, not ASCII
set attribution="Quoting %n (%a):"
set wait_key=no
set autoedit=yes        # don't ask silly questions, just spawn my editor

set beep=no             # beep, and I'll break your neck.
set beep_new=no         # New mail is not an excuse to beep. I will kill you.

set certificate_file=~/.mutt/certificates
set charset="iso-8859-1"
set send_charset="iso-8859-1"
set confirmcreate=no
#set check_new=yes

set date_format="%I:%M %b %d"
set delete=yes

set edit_headers=yes    # Include basic SMTP headers in text editor
set editor="vim '+/^$'"

set mark_old=no
set mime_forward=no
set move=no
set mbox_type=Maildir   # We want Maildir.

set header_cache=~/.mutt/cache/headers
set message_cachedir=~/.mutt/cache/bodies

set help=no             # don't show helpbar at the bottom.

set imap_idle=yes
set imap_check_subscribed="yes"
set imap_list_subscribed="yes" 
set include=yes
set index_format="%Z %[!%y%m%d] %-17.17F %s"
set status_format="%v: %f (%s) [%M/%m] [N=%n,*=%t,post=%p,new=%b]"

set sidebar_visible=no	# 'c' toggles sidebar on and off
set sidebar_width=30

set metoo=no            # don't copy myself on group replies

set postpone=ask-no     # ask if cancelled mail should get postponed
#set postponed="=[Gmail]/Drafts"
set prompt_after=no     # don't make me hit a key when returning from pgp

unset record		# imap records my sent mail
set reply_to=yes
set reverse_name=no	# in replies, use my own From:
set reply_regexp="^([rR][eE]([\[0-9\]+])*|sv|aw|SV|AW|Sv|Aw|Vedr):[ \t]*"

set spoolfile="=INBOX"
set strict_threads=yes
set status_on_top=yes
set sort=date

## Keyboard bindings, colour and GnuPG settings you won't need to touch.

bind attach ' ' select-entry
bind attach \Cg exit

bind editor \C? backspace

bind index   \t          next-unread
bind pager   \t          next-unread
bind index  ,\t      previous-unread
bind pager  ,\t      previous-unread
bind index V   show-version
bind pager V   show-version

# Repositioning messages and moving around
bind index zt current-top
bind index zz current-middle
bind index zb current-bottom

bind index <pagedown>     next-page
bind index <pageup>   previous-page

bind index \Cb      previous-page
bind index \Cf  forget-passphrase # \Cv --> 'f'orget-passphrase

bind index \Cx      sync-mailbox  # \Cx ->"sync-mailbox"

# calling the webbrowser through use of urlview:
macro index \cb "|urlview\n"

macro index I "c!\n"
macro pager I "c!\n"

# Invoking relaydb on spam
macro index S "|relaydb -b\n"

# ctrl-n, ctrl-p to select next, prev folder
# ctrl-o to open selected folder
bind index K sidebar-prev
bind index J sidebar-next
bind index y sidebar-open
bind pager K sidebar-prev
bind pager J sidebar-next
bind pager y sidebar-open

#macro pager y 'sidebar-open<enter>toggle sidebar_visible<enter><refresh>'
#macro index y 'sidebar-open<enter>toggle sidebar_visible<enter><refresh>'
macro index c '<enter-command>toggle sidebar_visible<enter><refresh>'
macro pager c '<enter-command>toggle sidebar_visible<enter><redraw-screen>'

## ===========================
## Bindings for pager
## ===========================

# pager bindings - vi style bindings

bind pager \Cn half-down
bind pager \Cp half-up

bind pager t   top
bind pager ^   top

bind pager G   bottom
bind pager $   bottom

bind pager /   search

bind pager n   next-undeleted

bind pager p   previous-undeleted
#bind pager P   print-message

bind pager L   list-reply 

bind pager ,b   bounce-message    
bind pager ,f   forward-message   
bind pager ,g   group-reply       
bind pager ,m   mail              
bind pager ,L   list-reply        
bind pager ,n   reply             
bind pager ,r   reply             
bind pager ,a   reply               # 'a' is for "answer"
bind pager ,j   next-undeleted    
bind pager ,k   previous-undeleted

## Bind default mail commands to jump commands
bind pager backspace   previous-line     
bind pager g   top               
bind pager j   next-line         
bind pager k   previous-line     
bind pager m   mail
bind pager L   list-reply
bind pager r   reply        
                      
bind pager :  enter-command

#charset-hook
#folder-hook

## Colour settings

color attachment  green  default  # ..
color bold        green  default  # ..
color error       red    white  # global

color header      blue   default  "^cc: "
color header      yellow default  "^date: "
color header      yellow    default  "^from: "
color header      red default    "^newsgroups: "
color header      red    default  "^reply-to: "
color header      yellow  default   "^subject: "
color header      yellow default  "^to: "
color header      magenta default  "^x-mailer: "
color header      red  default     "^Message-ID: "

color indicator   white  blue   # index
color markers     red    default  # index
color message     white  blue   # index

color quoted      cyan   default  # pager body
color quoted1     yellow default  # pager body
color quoted2     cyan   default  # pager body
color quoted3     yellow default  # pager body

color signature   red    default  # pager body
color status      yellow  blue   # index status bar default: default white
color tilde       blue   default  # pager body
color tree        yellow    default  # index
color underline   yellow default  # 

color body yellow  default "(http|https|ftp|news|telnet|finger)://[^ \">\t\r\n]*"
color body yellow  default "mailto:[-a-z_0-9.]+@[-a-z_0-9.]+"
color body yellow  default "news:[^ \">\t\r\n]*"

color body green  default "(^|[^[:alnum:][:punct:]])\\*[[:alnum:][:punct:]]+\\*([^[:alnum:][:punct:]]|$)" # *Bold* text.
color body green  default "(^|[^[:alnum:][:punct:]])_[[:alnum:][:punct:]]+_([^[:alnum:][:punct:]]|$)"     # _Underlined_ text.
color body green  default "(^|[^[:alnum:][:punct:]])/[[:alnum:][:punct:]]+/([^[:alnum:][:punct:]]|$)"   


# Command formats for gpg.
# 
# This version uses gpg-2comp from 
#   http://muppet.faveve.uni-stuttgart.de/~gero/gpg-2comp.tar.gz
#
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# decode application/pgp
set pgp_decode_command="gpg %?p?--passphrase-fd 0? --no-verbose --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg --no-verbose --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg --passphrase-fd 0 --no-verbose --batch --output - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="gpg-2comp --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="gpg-2comp --no-verbose --batch --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap gpg -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp --passphrase-fd 0 -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg --passphrase-fd 0 -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg --no-verbose --import -v %f"

# export a key from the public key ring
set pgp_export_command="gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --no-verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --no-verbose --batch --with-colons --list-keys %r" 

# read in the secret key ring
set pgp_list_secring_command="gpg --no-verbose --batch --with-colons --list-secret-keys %r" 

# receive key from keyserver:
#set pgp_getkeys_command="wrap.sh -g %r"
set pgp_getkeys_command=""

